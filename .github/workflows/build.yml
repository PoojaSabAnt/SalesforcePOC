name: March23-new-version
on:
  push:
    branches:
    - 'feature/**'  
  pull_request:
    branches:
    - 'development'
    - 'main'
    types: 
    - closed 
    
jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
      
    steps:
        
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    
    - name: Check commit messages for jira issue key
      uses: gsactions/commit-message-checker@v2
      with:
          pattern: '[A-Z]{2,}-\d+'
          error: 'You need to mention jira issue key in commit message'
          
    - name: Install Java  
      uses: actions/setup-java@main
      with:
       java-version: '8'
       distribution: 'temurin'
    - run: |
       pwd
       ls      
       java -Dpackage-prefix=wsc $GITHUB_WORKSPACE/ST4-4.0.8.jar $GITHUB_WORKSPACE/force-wsc-57.0.0.jar $GITHUB_WORKSPACE/antlr-runtime-3.5.2.jar com.sforce.ws.tools.wsdlc $GITHUB_WORKSPACE/partner.wsdl.xml $GITHUB_WORKSPACE/partner.jar    

    
  deploy:
    needs: build

    if: |
      (github.event_name == 'pull_request'   && github.event.pull_request.merged == true) &&
      ((contains(github.head_ref, 'feature') && github.base_ref == 'development') ||
      (github.head_ref == 'development'  && github.base_ref == 'main'))   
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 2
        
    
    - name: Authenticate sandbox, validate and deploy onto it
      env:
       SFDC_POC_USERNAME_DEV: ${{ secrets.SFDC_POCDEV_USERNAME }}
       SFDC_POC_PASSWORD_DEV: ${{ secrets.SFDC_POCDEV_PASSWORD }}
       SFDC_POC_SERVERURL_DEV: ${{ secrets.SFDC_POCDEV_SERVERURL }}
       SFDC_POC_USERNAME_PROD: ${{ secrets.SFDC_POCPROD_USERNAME }}
       SFDC_POC_PASSWORD_PROD: ${{ secrets.SFDC_POCPROD_PASSWORD }}
       SFDC_POC_SERVERURL_PROD: ${{ secrets.SFDC_POCPROD_SERVERURL }}  
      run: |
        
        BRANCH=${GITHUB_REF#refs/heads/}
        echo "Current branch is $BRANCH"
        if [[ $BRANCH == development ]]; then
          sed  -i 's|SFDC_POC_USERNAME|'"$SFDC_POC_USERNAME_DEV"'|g' $GITHUB_WORKSPACE/build.properties
          sed  -i 's|SFDC_POC_PASSWORD|'"$SFDC_POC_PASSWORD_DEV"'|g' $GITHUB_WORKSPACE/build.properties
          sed  -i 's|SFDC_POC_SERVERURL|'"$SFDC_POC_SERVERURL_DEV"'|g' $GITHUB_WORKSPACE/build.properties
        else [[ $BRANCH == main ]];       
          sed -i 's|SFDC_POC_USERNAME|'"$SFDC_POC_USERNAME_PROD"'|g' $GITHUB_WORKSPACE/build.properties
          sed -i 's|SFDC_POC_PASSWORD|'"$SFDC_POC_PASSWORD_PROD"'|g' $GITHUB_WORKSPACE/build.properties
          sed -i 's|SFDC_POC_SERVERURL|'"$SFDC_POC_SERVERURL_PROD"'|g' $GITHUB_WORKSPACE/build.properties
        fi
        
        export MANIFEST_FOLDER=$(jq -r '.MANIFEST_FOLDER.FOLDER' devops/params.json)
        echo "Manifest folder: $MANIFEST_FOLDER"
        mkdir $GITHUB_WORKSPACE/build/$MANIFEST_FOLDER/lib/  
        cp $GITHUB_WORKSPACE/lib/* $GITHUB_WORKSPACE/build/$MANIFEST_FOLDER/lib/
        cp $GITHUB_WORKSPACE/lib/* /usr/share/ant/lib/
        
        cat $GITHUB_WORKSPACE/build/$MANIFEST_FOLDER/project-manifest-TPM.txt | sort | uniq > /tmp/uniq_list.txt
        cat /tmp/uniq_list.txt | awk -F "/" '{ print $2 }' | sort | uniq > /tmp/uniq_folder.txt
        for i in `cat /tmp/uniq_folder.txt`; 
        do 
          mkdir -p /tmp/src/$i; 
        done 
        
        for i in `cat /tmp/uniq_list.txt`; 
        do 
          cp $GITHUB_WORKSPACE/$i /tmp/$i; 
        done 
        
        cp $GITHUB_WORKSPACE/src/package.xml /tmp/src
        cp $GITHUB_WORKSPACE/build.properties /tmp/
        rm -rf $GITHUB_WORKSPACE/src
        cp -r /tmp/src $GITHUB_WORKSPACE/
        cp /tmp/build.properties $GITHUB_WORKSPACE/
        ls -R $GITHUB_WORKSPACE/src
        ls $GITHUB_WORKSPACE
        
        
        echo "Validation of build file started"
        if [[ $BRANCH == development ]]; then
          ant -Dsf.username=${{ secrets.SFDC_POCDEV_USERNAME }} -Dhttps.protocols=TLSv1.1,TLSv1.2 -Dsf.password=${{ secrets.SFDC_POCDEV_PASSWORD }} -Dsf.serverurl=${{ secrets.SFDC_POCDEV_SERVERURL }} -buildfile $GITHUB_WORKSPACE/build/$MANIFEST_FOLDER/build.xml deployCodeCheckOnly 
        else
          ant -Dsf.username=${{ secrets.SFDC_POCPROD_USERNAME }} -Dhttps.protocols=TLSv1.1,TLSv1.2 -Dsf.password=${{ secrets.SFDC_POCPROD_PASSWORD }} -Dsf.serverurl=${{ secrets.SFDC_POCPROD_SERVERURL }} -buildfile $GITHUB_WORKSPACE/build/$MANIFEST_FOLDER/build.xml deployCodeCheckOnly 
        fi
        if [ $? != 0 ];  then
          echo "Validation failed"
        fi 
        
        echo "Deployment of components mentioned in manifest file started...."
        if [[ $BRANCH == development ]]; then
          ant -Dsf.username=${{ secrets.SFDC_POCDEV_USERNAME }} -Dhttps.protocols=TLSv1.1,TLSv1.2 -Dsf.password=${{ secrets.SFDC_POCDEV_PASSWORD }} -Dsf.serverurl=${{ secrets.SFDC_POCDEV_SERVERURL }} -buildfile $GITHUB_WORKSPACE/build/$MANIFEST_FOLDER/build.xml deploy_Sandbox
        else
          ant -Dsf.username=${{ secrets.SFDC_POCPROD_USERNAME }} -Dhttps.protocols=TLSv1.1,TLSv1.2 -Dsf.password=${{ secrets.SFDC_POCPROD_PASSWORD }} -Dsf.serverurl=${{ secrets.SFDC_POCPROD_SERVERURL }} -buildfile $GITHUB_WORKSPACE/build/$MANIFEST_FOLDER/build.xml deploy_Sandbox
        fi
        if [ $? != 0 ];  then  
            echo "Deployment on sandbox failed"
        fi
